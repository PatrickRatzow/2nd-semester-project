package datasource.mssql;

import dao.DaoFactory;
import dao.mssql.DaoFactoryMsSql;
import datasource.DBConnection;

import java.sql.*;

public class DBConnectionMsSql implements DBConnection {
    private static Connection connection;
    private static final String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private Runnable onRelease;
    private volatile DaoFactory factory;

    public DBConnectionMsSql(String host, int port, String username, String password, String database) {
        String connectionString = String.format("jdbc:sqlserver://%s:%s;database=%s;user=%s;password=%s",
                host, port, database, username, password);
        try {
            Class.forName(driver);
            connection = DriverManager.getConnection(connectionString);
        } catch (ClassNotFoundException e) {
            System.err.println("Could not load JDBC driver");
            e.printStackTrace();
        } catch (SQLException e) {
            System.err.println("Could not connect to database " + database + "@" + host + ":" + port + " as user " +
                    username + " using password ******");
            System.out.println("Connection string was: " +
                    connectionString.substring(0, connectionString.length() - password.length()) + "....");
            e.printStackTrace();
        }
    }

    /**
     * Start transaction.
     *
     * @throws SQLException the sql exception
     */
    @Override
    public void startTransaction() throws SQLException {
        connection.setAutoCommit(false);
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return connection.setSavepoint();
    }

    /**
     * Commit transaction.
     *
     * @throws SQLException the sql exception
     */
    @Override
    public void commitTransaction() throws SQLException {
        connection.commit();
        connection.setAutoCommit(true);
    }

    /**
     * Rollback transaction.
     *
     * @throws SQLException the sql exception
     */
    @Override
    public void rollbackTransaction() throws SQLException {
        connection.rollback();
        connection.setAutoCommit(true);
    }

    @Override
    public void rollbackTransaction(Savepoint savepoint) throws SQLException {
        connection.rollback(savepoint);
        connection.setAutoCommit(true);
    }

    /**
     * Gets connection.
     *
     * @return the connection
     */
    @Override
    public Connection getConnection() {
        return connection;
    }

    /**
     * Prepare statement prepared statement.
     *
     * @param sql the sql
     * @return the prepared statement
     * @throws SQLException the sql exception
     */
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return connection.prepareCall(sql);
    }

    /**
     * Prepare statement prepared statement.
     *
     * @param sql               the sql
     * @param autoGeneratedKeys the auto generated keys
     * @return the prepared statement
     * @throws SQLException the sql exception
     */
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    /**
     * Disconnect.
     */
    @Override
    public void disconnect() throws SQLException {
        connection.close();
    }

    @Override
    public void setOnRelease(Runnable runnable) {
        onRelease = runnable;
    }

    @Override
    public void release() {
        onRelease.run();
    }
    
    @Override
    public DaoFactory getDaoFactory() {
        if (factory == null) {
            synchronized (this) {
                if (factory == null) {
                    factory = new DaoFactoryMsSql(this);
                }
            }
        }
        
        return factory;
    }
}